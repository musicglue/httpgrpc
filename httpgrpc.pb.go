// Code generated by protoc-gen-go. DO NOT EDIT.
// source: httpgrpc.proto

package httpgrpc // import "github.com/musicglue/httpgrpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HTTPRequest struct {
	Method               string    `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Url                  string    `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Headers              []*Header `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	Body                 []byte    `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HTTPRequest) Reset()         { *m = HTTPRequest{} }
func (m *HTTPRequest) String() string { return proto.CompactTextString(m) }
func (*HTTPRequest) ProtoMessage()    {}
func (*HTTPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_httpgrpc_efeacfac406486ef, []int{0}
}
func (m *HTTPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPRequest.Unmarshal(m, b)
}
func (m *HTTPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPRequest.Marshal(b, m, deterministic)
}
func (dst *HTTPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPRequest.Merge(dst, src)
}
func (m *HTTPRequest) XXX_Size() int {
	return xxx_messageInfo_HTTPRequest.Size(m)
}
func (m *HTTPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPRequest proto.InternalMessageInfo

func (m *HTTPRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HTTPRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTPRequest) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type HTTPResponse struct {
	Code                 int32     `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Headers              []*Header `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	Body                 []byte    `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HTTPResponse) Reset()         { *m = HTTPResponse{} }
func (m *HTTPResponse) String() string { return proto.CompactTextString(m) }
func (*HTTPResponse) ProtoMessage()    {}
func (*HTTPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_httpgrpc_efeacfac406486ef, []int{1}
}
func (m *HTTPResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPResponse.Unmarshal(m, b)
}
func (m *HTTPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPResponse.Marshal(b, m, deterministic)
}
func (dst *HTTPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPResponse.Merge(dst, src)
}
func (m *HTTPResponse) XXX_Size() int {
	return xxx_messageInfo_HTTPResponse.Size(m)
}
func (m *HTTPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPResponse proto.InternalMessageInfo

func (m *HTTPResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HTTPResponse) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Header struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values               []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_httpgrpc_efeacfac406486ef, []int{2}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (dst *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(dst, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Header) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*HTTPRequest)(nil), "httpgrpc.HTTPRequest")
	proto.RegisterType((*HTTPResponse)(nil), "httpgrpc.HTTPResponse")
	proto.RegisterType((*Header)(nil), "httpgrpc.Header")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HTTPClient is the client API for HTTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HTTPClient interface {
	Handle(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*HTTPResponse, error)
}

type hTTPClient struct {
	cc *grpc.ClientConn
}

func NewHTTPClient(cc *grpc.ClientConn) HTTPClient {
	return &hTTPClient{cc}
}

func (c *hTTPClient) Handle(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*HTTPResponse, error) {
	out := new(HTTPResponse)
	err := c.cc.Invoke(ctx, "/httpgrpc.HTTP/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPServer is the server API for HTTP service.
type HTTPServer interface {
	Handle(context.Context, *HTTPRequest) (*HTTPResponse, error)
}

func RegisterHTTPServer(s *grpc.Server, srv HTTPServer) {
	s.RegisterService(&_HTTP_serviceDesc, srv)
}

func _HTTP_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpgrpc.HTTP/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServer).Handle(ctx, req.(*HTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "httpgrpc.HTTP",
	HandlerType: (*HTTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _HTTP_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "httpgrpc.proto",
}

func init() { proto.RegisterFile("httpgrpc.proto", fileDescriptor_httpgrpc_efeacfac406486ef) }

var fileDescriptor_httpgrpc_efeacfac406486ef = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x3f, 0x4f, 0x84, 0x40,
	0x10, 0xc5, 0xe5, 0x40, 0xf4, 0xe6, 0x2e, 0xe6, 0xb2, 0x89, 0x17, 0x62, 0x45, 0x48, 0x8c, 0xc4,
	0x02, 0x12, 0xac, 0x2c, 0xd5, 0x86, 0xd2, 0x6c, 0xae, 0xb2, 0x03, 0x76, 0x02, 0x44, 0xb8, 0xc5,
	0xfd, 0xa3, 0xb9, 0x6f, 0x6f, 0x76, 0x01, 0x25, 0x56, 0x76, 0xef, 0x0d, 0x8f, 0xfd, 0xcd, 0xdb,
	0x85, 0xab, 0x46, 0xa9, 0xa1, 0x16, 0x43, 0x95, 0x0c, 0x82, 0x2b, 0x4e, 0x2e, 0x67, 0x1f, 0x7d,
	0xc1, 0x26, 0x3f, 0x1c, 0x5e, 0x29, 0x7e, 0x68, 0x94, 0x8a, 0xec, 0xc1, 0xef, 0x51, 0x35, 0x9c,
	0x05, 0x4e, 0xe8, 0xc4, 0x6b, 0x3a, 0x39, 0xb2, 0x03, 0x57, 0x8b, 0x2e, 0x58, 0xd9, 0xa1, 0x91,
	0xe4, 0x1e, 0x2e, 0x1a, 0x2c, 0x18, 0x0a, 0x19, 0xb8, 0xa1, 0x1b, 0x6f, 0xb2, 0x5d, 0xf2, 0x03,
	0xc9, 0xed, 0x07, 0x3a, 0x07, 0x08, 0x01, 0xaf, 0xe4, 0xec, 0x14, 0x78, 0xa1, 0x13, 0x6f, 0xa9,
	0xd5, 0x51, 0x09, 0xdb, 0x11, 0x2c, 0x07, 0x7e, 0x94, 0x68, 0x32, 0x2f, 0x9c, 0xa1, 0xe5, 0x9e,
	0x53, 0xab, 0x97, 0x8c, 0xd5, 0x7f, 0x19, 0xee, 0x82, 0x91, 0x81, 0x3f, 0xc6, 0xcc, 0xfe, 0xef,
	0x78, 0x9a, 0x4a, 0x19, 0x69, 0x9a, 0x7e, 0x16, 0x9d, 0xc6, 0xf1, 0xe8, 0x35, 0x9d, 0x5c, 0xf6,
	0x04, 0x9e, 0xd9, 0x8b, 0x3c, 0x82, 0x9f, 0x17, 0x47, 0xd6, 0x21, 0xb9, 0x5e, 0x40, 0x7f, 0xaf,
	0xea, 0x66, 0xff, 0x77, 0x3c, 0x16, 0x89, 0xce, 0x9e, 0xef, 0xde, 0x6e, 0xeb, 0x56, 0x35, 0xba,
	0x4c, 0x2a, 0xde, 0xa7, 0xbd, 0x96, 0x6d, 0x55, 0x77, 0x1a, 0x53, 0xd9, 0x32, 0xac, 0x0a, 0x91,
	0xce, 0xff, 0x95, 0xbe, 0x7d, 0x8d, 0x87, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x50, 0xf0,
	0x45, 0x9f, 0x01, 0x00, 0x00,
}
